extends ../../template/blog-layout.jade

block article
    time.none 2016-1-18 21:08
    article.article.markdown-body
        h1 业务模块化
        p.
            对比经历的两家创业公司, 在业务模块化这个点的处理上有比较大的区别.

        h4 demo的目录结构
        p.
            一般在刚开始接触和学习Node.js的时候, 会看一些的demo, 如: mongodb + node.js + express实现xxx.
            经常看到类似的目录结构如:

        pre.
            ┬ app
            ├── ...
            ├── bin/            // 程序启动脚本等
            ├── logs/           // 日志目录
            ├── common/         // 自定义通用库
            ├── public/         // 静态资源
            ├── routes/         // 路由
            ├── views/          // 模版文件
            ├── models/         // mongoose定义mongodb文档的schema, 或者其它对应的ORM实现
            ├── proxies/        // models的proxy
            ├── middleware/     // 中间件
            ├── controller/     // 控制器
            └── app.js          // server启动入口

        p.
            上述目录结构出现在一些demo中时, 因为demo太简单, 不会感觉到多大问题.
            但如果是一个完整的实用系统时, 上面的目录结构不能有效的区分和隔离不同的业务模块.

        h4 POS系统
        p.
            假设一个POS系统, 业务模块也许有

        pre.
            1. 收银
            2. 会员
            3. 员工
            4. 考勤
            5. 报表
            6. ...

        p.
            需要规划一个新的目录结构, 既能包含demo的分层特点, 又能将不同的业务模块隔离开来.
        p.
            可能面临的问题
        pre.
            1. 增加功能, 新的代码是怎么融入到已有的项目当中? 添加到哪个目录? 对应的资源文件应该放哪?
            2. 修改已有功能, 如何快速找到这个功能所涉及到的代码以及资源文件?
            3. 如何避免不断增加新文件, 导致某些目录下的文件数量过于庞大?
            4. 系统会越来越庞大, 怎样快速拆分成不同的子系统?

        p.
            实际上会面临的问题远不止这些, 以上列出的几点, 只是自己实际遇到并烦恼过的.

        h4 解决思路
        p.
            分解一个复杂系统可以从两个主要方面去思考

        pre.
            1. 垂直分割(业务层面)
            2. 水平分层(技术层面)

        p.
            可以先垂直分隔再水平分层, 也可以反过来.
            合理的做法是先垂直在水平, 可以保持模块内聚.

        p.
            demo的代码结构只体现了水平分层, 没有体现垂直分割.
            面对上述的POS系统, 我们需要先进行垂直分割, 也就列出来的业务模块.
            然后再参照demo的代码结构做每个模块的水平分层.

        p.
            按照先垂直再水平的方式, 可能的目录结构

        pre.
            ┬ app
            ├── ...
            ├── bin/        // 程序启动脚本等
            ├── logs/       // 日志目录
            ├── common/     // 自定义通用库
            ├── src/
            │   ├── pos/
            │   │   ├── views/
            │   │   ├── models/
            │   │   ├── middleware/
            │   │   ├── controller/
            │   │   └── ...
            │   ├── member/
            │   │   └── ...
            │   ├── employee/
            │   │   └── ...
            │   └── ...
            └── app.js      // server启动入口

        p.
            这样的目录结构体现了业务模块化, 并且每个模块可以保持相对内聚.
            但从实现角度, 还需要一个比较好的组织方式让每个模块能正常运作起来.
        p.
            下次再分享一个具体实现.